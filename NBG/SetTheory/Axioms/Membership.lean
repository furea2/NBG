import NBG.SetTheory.Defs
import NBG.SetTheory.Axioms.Domain

open Classical

-- 8. AxiomMembership
axiom AxiomMembership :
  ‚àÉE: Class, ‚àÄx y: SetType, (Ôºúx, yÔºûc ‚àà E ‚Üî x‚àày)
noncomputable def E := choose AxiomMembership
noncomputable def E_def := choose_spec AxiomMembership
-- theorem DomEEqUniv : (Dom E) Ôºù U := sorry
def isFunction (F : Class) [Relation F] : Prop :=
  ‚àÄx x' y y': SetType,
    Ôºúx, yÔºûc ‚àà F ‚Üí Ôºúx', y'Ôºûc ‚àà F ‚Üí x.1Ôºùx'.1 ‚àß y.1Ôºùy'.1
class Function (F : Class) extends Relation F where
  isFunction : isFunction F
def Apply (F x: Class) {h: x‚àà (Dom F)} [hF: Function F] : Class := by {
  have F_def := hF.1.1;
  unfold isRelation at F_def;
  sorry;
}

noncomputable def UnionAll (X : Class) :=
  Dom (E ‚à© (U ‚úï X))
noncomputable instance : HasUnionAll Class where
  UnionAll := UnionAll

noncomputable def InterAll (X : Class) :=
  Diff U (Dom ((Diff U‚ÇÇ E) ‚à© (U ‚úï X)))
noncomputable instance : HasInterAll Class where
  InterAll := InterAll

noncomputable def PowerSet (X : Class) :=
  Diff U (Dom ((RelInv E) ‚à© (U ‚úï (Diff U X))))
noncomputable instance : HasPow Class where
  Pow := PowerSet

theorem UnivIsClosedPowerSet:
  U Ôºù ùí´ U := sorry

